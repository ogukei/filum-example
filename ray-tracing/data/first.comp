#version 450

layout(constant_id = 0) const uint WIDTH = 8;
layout(constant_id = 1) const uint HEIGHT = 8;

#define FLT_MAX 3.402823466e+38

// @see https://www.ronja-tutorials.com/2018/09/02/white-noise.html
float rand(vec3 value) {
    return fract(sin(dot(sin(value), vec3(12.9898, 78.233, 37.719))) * 143758.5453);
}

layout(binding = 0) buffer Binding {
    vec4 image[];
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Sphere {
    vec3 center;
    float radius;
    uint mat;
};

// Material
#define MATERIAL_LAMBERTIAN 0
#define MATERIAL_METAL 1
#define MATERIAL_DIELECTRIC 2

#define MATERIAL_INDEX(_idx) _idx
#define MATERIAL(_idx) MATERIALS[_idx]

struct Material {
    uint type;
    vec3 albedo;
};

const Material MATERIALS[2] = Material[](
    Material(MATERIAL_LAMBERTIAN, vec3(0.5, 0.5, 0.5)),
    Material(MATERIAL_LAMBERTIAN, vec3(0.5, 0.5, 0.5))
);

struct Hit {
    float t;
    vec3 p;
    vec3 normal;
    uint mat;
};

struct Random {
    uint x;
    uint y;
    uint n;
};

float randomNext(inout Random r) {
    r.n += 1;
    return rand(vec3(r.x, r.n, r.y));
}

const uint NUM_OBJECTS = 2;
const Sphere OBJECTS[NUM_OBJECTS] = Sphere[](
    Sphere(vec3(0, 0, -1), 0.5, MATERIAL_INDEX(0)),
    Sphere(vec3(0, -100.5, -1), 100.0, MATERIAL_INDEX(1))
);

const uint NUM_ANTIALIASING = 1000;

Ray ray(vec3 origin, vec3 direction) {
    return Ray(origin, normalize(direction));
}

vec3 rayPoint(Ray r, float t) {
    return r.origin + t * r.direction;
}

bool sphereHit(Sphere s, Ray r, float tMin, float tMax, inout Hit hit) {
    vec3 oc = r.origin - s.center;
    float a = dot(r.direction, r.direction);
    float b = dot(oc, r.direction);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = b*b - a*c;
    if (discriminant > 0) {
        float temp = (-b - sqrt(discriminant)) / a;
        if (temp < tMax && temp > tMin) {
            vec3 p = rayPoint(r, temp);
            hit.t = temp;
            hit.p = p;
            hit.normal = (p - s.center) / s.radius;
            hit.mat = s.mat;
            return true;
        }
        temp = (-b + sqrt(discriminant)) / a;
        if (temp < tMax && temp > tMin) {
            vec3 p = rayPoint(r, temp);
            hit.t = temp;
            hit.p = p;
            hit.normal = (p - s.center) / s.radius;
            hit.mat = s.mat;
            return true;
        }
    }
    return false;
}

vec3 randomNextSphereUnit(inout Random r) {
    vec3 p;
    float len;
    do {
        float a = randomNext(r);
        float b = randomNext(r);
        float c = randomNext(r);
        p = 2.0 * vec3(a, b, c) - vec3(1, 1, 1);
        len = length(p);
    } while (len*len >= 1.0);
    return p;
}

bool hitObjects(Ray r, float tMin, float tMax, inout Hit hit) {
    Hit tempHit;
    bool hitAnything = false;
    float closestSoFar = tMax;
    for (uint i = 0; i < NUM_OBJECTS; i++) {
        Sphere object = OBJECTS[i];
        if (sphereHit(object, r, tMin, closestSoFar, tempHit)) {
            hitAnything = true;
            closestSoFar = tempHit.t;
            hit = tempHit;
        }
    }
    return hitAnything;
}

bool materialScatter(Material mat, Ray r, Hit hit, inout Random rng, out vec3 attenuation, out Ray scattered) {
    switch (mat.type) {
    case MATERIAL_LAMBERTIAN:
        vec3 target = hit.p + hit.normal + randomNextSphereUnit(rng);
        scattered = ray(hit.p, target - hit.p);
        attenuation = mat.albedo;
        return true;
    }
}

bool diffuse(Ray r, inout Random rng, out vec3 diffuseColor, inout Hit hit) {
    if (hitObjects(r, 0.001, FLT_MAX, hit)) {
        return true;
    } else {
        vec3 dir = r.direction;
        float t = 0.5 * (dir.y + 1.0);
        diffuseColor = (1.0 - t) * vec3(1, 1, 1) + t * vec3(0.5, 0.7, 1.0);
        return false;
    }
}

vec3 diffuseLoop(Ray initialRay, inout Random rng) {
    vec3 multiplies = vec3(1, 1, 1);
    Ray diffuseRay = initialRay;
    Hit hit;
    vec3 diffuseColor;
    for (uint i = 0; i < 100; i++) {
        bool continues = diffuse(diffuseRay, rng, diffuseColor, hit);
        if (continues) {
            vec3 attenuation;
            Ray scattered;
            continues = materialScatter(MATERIAL(hit.mat), diffuseRay, hit, rng, attenuation, scattered);
            if (continues) {
                multiplies *= attenuation;
                diffuseRay = scattered;
            } else {
                break;
            }
        } else {
            return multiplies * diffuseColor;
        }
    }
    return vec3(0, 0, 0);
}

// Camera
struct Camera {
    vec3 origin;
    vec3 lowerLeftCorner;
    vec3 horizontal;
    vec3 vertical;
};

const Camera CAMERA = Camera(
    vec3(0, 0, 0),
    vec3(-2.0, -1.0, -1.0),
    vec3(4.0, 0, 0),
    vec3(0, 2, 0)
);

Ray cameraRay(Camera c, float u, float v) {
    return ray(c.origin, c.lowerLeftCorner + u * c.horizontal + v * c.vertical);
}

void antialiasing(Camera camera, uint ix, uint iy, inout Random rng, inout vec3 blended) {
    float noiseX = randomNext(rng);
    float noiseY = randomNext(rng);
    float u = float(ix + noiseX) / float(WIDTH);
    float v = float(iy + noiseY) / float(HEIGHT);
    Ray r = cameraRay(camera, u, v);
    blended += diffuseLoop(r, rng);
}

void main() {
    uint ix = gl_GlobalInvocationID.x;
    uint iy = gl_GlobalInvocationID.y;
    vec3 blended = vec3(0, 0, 0);
    Random rng = Random(ix + WIDTH * iy, 0, 0);
    for (uint ia = 0; ia < NUM_ANTIALIASING; ia++) {
        rng.y = ia;
        antialiasing(CAMERA, ix, iy, rng, blended);
    }
    blended /= float(NUM_ANTIALIASING);
    blended = sqrt(blended);
    image[iy * WIDTH + ix] = vec4(blended, 1.0);
}
