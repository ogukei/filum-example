#version 450

layout(constant_id = 0) const uint WIDTH = 8;
layout(constant_id = 1) const uint HEIGHT = 8;
layout(binding = 0) buffer Binding {
    vec4 image[];
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray ray(vec3 origin, vec3 direction) {
    return Ray(origin, normalize(direction));
}

vec3 rayPoint(Ray r, float t) {
    return r.origin + t * r.direction;
}

float hitSphere(vec3 center, float radius, Ray r) {
    vec3 oc = r.origin - center;
    float a = dot(r.direction, r.direction);
    float b = 2.0 * dot(oc, r.direction);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b*b - 4*a*c;
    if (discriminant < 0) {
        return -1.0;
    } else {
        return (-b - sqrt(discriminant)) / (2.0 * a);
    }
}

vec3 color(Ray r) {
    float t = hitSphere(vec3(0, 0, -1), 0.5, r);
    if (t > 0) {
        vec3 n = normalize(rayPoint(r, t) - vec3(0, 0, -1));
        return 0.5 * (n + 1.0);
    }
    vec3 dir = r.direction;
    t = 0.5 * (dir.y + 1.0);
    return (1.0 - t) * vec3(1, 1, 1) + t * vec3(0.5, 0.7, 1.0);
}

const vec3 lowerLeftCorner = vec3(-2.0, -1.0, -1.0);
const vec3 horizontal = vec3(4.0, 0, 0);
const vec3 vertical = vec3(0, 2, 0);
const vec3 origin = vec3(0, 0, 0);

void main() {
    uint ix = gl_GlobalInvocationID.x;
    uint iy = gl_GlobalInvocationID.y;
    float u = float(ix) / float(WIDTH);
    float v = float(iy) / float(HEIGHT);
    Ray r = ray(origin, lowerLeftCorner + u * horizontal + v * vertical);
    image[iy * WIDTH + ix] = vec4(color(r), 1);
}
